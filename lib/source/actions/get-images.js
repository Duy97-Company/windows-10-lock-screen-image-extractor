"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=_default;var _chalk=_interopRequireDefault(require("chalk"));var _helpers=require("../helpers");var _constants=require("../constants");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}/* Action that handle extracting lock screen from windows */async function _default(args,options,logger){let pathToSave=(0,_helpers.trimQuotes)(options.path?options.path:_constants.DEFAULT_SAVE_PATH).replace(/\s/g,"_");let orientation=(0,_helpers.trimQuotes)(options.orientation?options.orientation:_constants.ORIENTATION_ALL);let namePattern=(0,_helpers.trimQuotes)(options.namePattern?options.namePattern:_constants.IMAGE_NAME_FORMAT_ORIGIN);/**
   *  Ask user questions to customize the action
   *  promptConditionMatch(process): check the number of process arguments to decide whether to ask:
   *    - number of arguments === 0 => Ask
   *    - Otherwise: Skip
   */if((0,_helpers.promptConditionMatch)(process)){const answers=await(0,_helpers.argumentsPrompt)();if(answers.path)pathToSave=answers.path;if(answers.orientation)orientation=answers.orientation;if(answers.namePattern)namePattern=answers.namePattern}/**
   *  Save user settings
   *  Currently, we only save the images's save path
   */(0,_helpers.setSavePath)(pathToSave);/* Steps to handle the action */logger.info(_chalk.default.cyan("\nStart processing"));/* 1. Create saving folder if hasn't */if(!(await(0,_helpers.taskExecutor)((0,_helpers.createImagesFolder)(pathToSave),"Create images folder",250))){logger.error("\nError while creating images folder! Please try againl later!");return}/* 2. Crawl images from windows's image folder */const files=await(0,_helpers.taskExecutor)((0,_helpers.getFiles)(_constants.PATH_TO_IMAGE),"Crawling images",400);/* 3. Filter image based on user's input */const validImages=await(0,_helpers.taskExecutor)((0,_helpers.filterImages)(files,{orientation}),"Filtering ones that match your settings",400);/* 4. Checkout images you already have */const savedImages=(0,_helpers.getFiles)(pathToSave);/* 5. Compare the old ones with new so images won't repeat */const uniqueImages=await(0,_helpers.taskExecutor)((0,_helpers.filterUniqueImages)(validImages,savedImages),"Exclude duplicates",400);/* 6. Check if there were unique images (new images) */if(uniqueImages.length){/* 7. Copy them to saving folder */const count=await(0,_helpers.taskExecutor)((0,_helpers.copyBulkFiles)(uniqueImages,_constants.PATH_TO_IMAGE,pathToSave,namePattern),`Found ${uniqueImages.length} new images. Copying..`,400);/* 8. Announce the result */logger.info(_chalk.default.green(`\nSuccessfully copy ${count} new images!`));logger.info((0,_chalk.default)(`Save folder (Ctrl + click to open): ${_chalk.default.underline.cyan(`file://${pathToSave}`)}`))}else{logger.info(_chalk.default.yellow("\nI found no NEW images :) Better luck next time!"))}}